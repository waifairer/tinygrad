# taskjuggler
project tinygrad "TinyGrad"  2023-07-15-0:00--0500 +4m {
  timezone "America/Los_Angeles"
  timeformat "%Y-%m-%d"

  extend task {
    reference PR "PR"
    text Bounty_hunter "Bounty Hunter" { inherit }
    text Bounty "Bounty" { inherit }
    text Status "Status"
  }

  # Maybe useful for bounty amts
  numberformat "-" "" "," "." 1
  currencyformat "(" ")" "," "." 0
  currency "USD"

  # You can define multiple scenarios here if you need them.
  #scenario plan "Plan" {
  #  scenario actual "Actual"
  #}

  # You can define your own attributes for tasks and resources. This
  # is handy to capture additional information about the project that
  # is not directly impacting the project schedule, but which you like to
  # keep in one place.
  #extend task {
  #  reference spec "Link to Wiki page"
  #}
  #extend resource {
  #  text Phone "Phone"
  #}
}

copyright "FLOPs"

# If you have any text block that you need multiple times to describe
# your project, you should define a macro for it. Macros can even have
# variable segments that you can set upon calling the macro.
#
# macro Task [
#   task "A ${1} task" {
#   }
# ]
#
# Can be called as
# ${Task "big"}
# to generate
# task "A big task" {
# }

# You can attach flags to accounts, resources and tasks. These can be
# used to filter out subsets of them during reporting.
flags important, hidden

task tinygrad "TinyGrad" {
  task mlperf "TinyGrad Competing in MLPerf" {
    task resnet "resnet50-v1.5" {
      start 2023-08-02
      end 2023-09-15
      Bounty "$500"
      Bounty_hunter "ojaffe"
      PR "https://github.com/tinygrad/tinygrad/pull/1404"
      Status "Open - Locked"
    }
    task retnet "retinanet 800x800" {
      Bounty "$500"
    }
    task bert "bert" {
      Bounty "$500"
      Bounty_hunter "wozeparrot"
      PR "https://github.com/tinygrad/tinygrad/pull/874"
      Status "Open - Locked"

    }
    task unet "3d-unet" {
      start 2023-08-13
      end 2023-09-15
      Bounty "$500"
      Bounty_hunter "rkstgr"
      PR "https://github.com/tinygrad/tinygrad/pull/1535"
      Status "Open - Locked"
    }
    task rcnn "rnnt" {
      Bounty "$500"
    }
  }
  task amdmlperf "AMD On MLPerf" {
    task mgpu "MultiGPU" {
      start 2023-08-11
      end 2023-08-18
      Bounty "$1000"
      Bounty_hunter "wozeparrot"
      PR "https://github.com/tinygrad/tinygrad/pull/1529"
      Status "Won"
    }
    task wino "Winograd Convolution" {
      start 2023-07-15
      end 2023-10-01
      Bounty "$1000"
      Bounty_hunter "chaosagent"
      PR "https://github.com/tinygrad/tinygrad/pull/1037"
      Status "Won"
    }
    task syms "Symbolic Shape Tracker" {
      start 2023-07-26
      end 2023-08-18
      Bounty "$1000"
      Bounty_hunter "chenyuxyz"
      PR "https://github.com/tinygrad/tinygrad/pull/1353"
      Status "Won"
    }
    task f16 "f16/bf16 cifar" {
      Bounty "$200"
      Bounty_hunter "kunwar31"
      PR "https://github.com/tinygrad/tinygrad/pull/1200"
      Status "Open - Locked"
    }
    task hip "HIP passing tests" {
      Bounty "$200"
      Bounty_hunter "dc-dc-dc"
      PR "https://github.com/tinygrad/tinygrad/pull/1419"
      Status "Open - Locked"
    }
    task rdna "RDNA asm passing all tests" {} 
    task wmma "WMMA" {
      start 2023-07-26
      end 2023-08-18
      Bounty "N/A"
      Bounty_hunter "geohot"
      PR "https://github.com/tinygrad/tinygrad/pull/1563"
      Status "Complete"
    }
  }


}



# A traditional Gantt chart with a project overview.


navigator navbar {
  hidereport 0
}

macro TaskTip [
  tooltip istask() -8<-
    '''Start: ''' <-query attribute='start'->
    '''End: ''' <-query attribute='end'->
    ----
    '''Journal:'''

    <-query attribute='journal'->
    ----
    '''Precursors: '''

    <-query attribute='precursors'->
    ->8-
]

textreport frame "" {
  header -8<-
    == TinyGrad (on MLPerf) ==
  ->8-
  footer "----"
  textreport index "Overview" {
    formats html
    center '<[report id="overview"]>'
  }

  textreport "Status" {
    formats html
    center -8<-
      <[report id="status.dashboard"]>
      ----
      <[report id="status.completed"]>
      ----
      <[report id="status.ongoing"]>
      ----
      <[report id="status.future"]>
    ->8-
  }

  textreport wps "Work packages" {
    textreport wp1 "Work package 1" {
      formats html
      center '<[report id="wp1"]>'
    }

    textreport wp2 "Work package 2" {
      formats html
      center '<[report id="wp2"]>'
    }
  }

  textreport "Deliveries" {
    formats html
    center '<[report id="deliveries"]>'
  }

  textreport "ContactList" {
    formats html
    title "Contact List"
    center '<[report id="contactList"]>'
  }
  textreport "ResourceGraph" {
    formats html
    title "Resource Graph"
    center '<[report id="resourceGraph"]>'
  }
}

# A traditional Gantt chart with a project overview.
taskreport overview "" {
  columns name, Bounty, Bounty_hunter, PR, chart { ${TaskTip} scale day width 800 }
  # For this report we like to have the abbreviated weekday in front
  # of the date. %a is the tag for this.
  timeformat "%a %Y-%m-%d"
  loadunit days
  hideresource 1
}

# Macro to set the background color of a cell according to the alert
# level of the task.
macro AlertColor [
  cellcolor plan.alert = 0 "#90FF90" # green
  cellcolor plan.alert = 1 "#FFFF90" # yellow
  cellcolor plan.alert = 2 "#FF9090" # red
]

taskreport status "" {
  columns bsi { width 50 title 'WBS' }, name { width 150 },
          start { width 100 }, end { width 100 },
          effort { width 100 },
          alert { tooltip plan.journal
                          != '' "<-query attribute='journal'->" width 150 },
          status { width 150 }

  taskreport dashboard "" {
    headline "Task updates"
    columns name { title "Task" ${AlertColor} width 200},
            resources { width 200 ${AlertColor}
                        listtype bullets
                        listitem "<-query attribute='name'->"
                        start ${projectstart} end ${projectend} },
            alerttrend { title "Trend" ${AlertColor} width 50 },
            journal { width 350 ${AlertColor} }
    journalmode status_up
    journalattributes headline, author, date, summary, details
    hidetask ~hasalert(0)
    sorttasks alert.down, plan.end.up
    period %{${now} - 1w} +1w
  }
  taskreport completed "" {
    headline "Already completed tasks"
    hidetask ~(plan.end <= ${now})
  }
  taskreport ongoing "" {
    headline "Ongoing tasks"
    hidetask ~((plan.start <= ${now}) & (plan.end > ${now}))
  }
  taskreport future "" {
    headline "Future tasks"
    hidetask ~(plan.start > ${now})
  }
}

# A list of tasks showing the resources assigned to each task.
taskreport wp1 "" {
  headline "Work package 1 - Resource Allocation Report"
  columns bsi { title 'WBS' }, name, start, end, effort { title "Work" },
          duration, chart { ${TaskTip} scale day width 500 }
  timeformat "%Y-%m-%d"
  hideresource ~(isleaf() & isleaf_())
  sortresources name.up
  taskroot tinygrad
}
# A list of tasks showing the resources assigned to each task.
taskreport wp2 "" {
  headline "Work package 2 - Resource Allocation Report"
  columns bsi { title 'WBS' }, name, start, end, effort { title "Work" },
          duration, chart { ${TaskTip} scale day width 500 }
  timeformat "%Y-%m-%d"
  hideresource ~(isleaf() & isleaf_())
  sortresources name.up
  taskroot tinygrad
}

# A list of all tasks with the percentage completed for each task
taskreport deliveries "" {
  headline "Project Deliverables"
  columns bsi { title 'WBS' }, name, start, end, note { width 150 }, complete,
          chart { ${TaskTip} }
  taskroot tinygrad
  hideresource 1
}
# A list of all employees with their contact details.
resourcereport contactList "" {
  headline "Contact list and duty plan"
  columns name,
          email { celltext 1 "[mailto:<-email-> <-email->]" },
          managers { title "Manager" },
          chart { scale day }
  hideresource ~isleaf()
  sortresources name.up
  hidetask 1
}

# A graph showing resource allocation. It identifies whether each
# resource is under- or over-allocated for.
resourcereport resourceGraph "" {
  headline "Resource Allocation Graph"
  columns no, name, effort, rate, weekly { ${TaskTip} }
  loadunit shortauto
  # We only like to show leaf tasks for leaf resources.
  hidetask ~(isleaf() & isleaf_())
  sorttasks plan.start.up
}

